service: janelia-neuronbridge-cds

projectDir: ../

plugins:
  - serverless-appsync-plugin
  - serverless-bundle
  - serverless-deployment-bucket
  - serverless-step-functions

custom:
  version: 3.0.0
  tracing: false
  debug: true

  cognitoUserPoolId: ${cf:janelia-neuronbridge-web-${self:provider.stage}.UserPoolId}
  downloadBucket: ${file(../config.yml):config.downloadBucket}
  dataBucket: ${file(../config.yml):config.dataBucket}
  identityPoolId: ${cf:janelia-neuronbridge-web-${self:provider.stage}.IdentityPoolId}
  libraryBucket: ${file(../config.yml):config.libraryBucket}
  libraryThumbnailsBucket: ${file(../config.yml):config.libraryThumbnailsBucket}
  neuronbridgeAppId: ${cf:janelia-neuronbridge-web-${self:provider.stage}.UserPoolClientId}

  oldSearchTable: janelia-neuronbridge-search-table-prod
  oldSearchBucket: janelia-neuronbridge-searches-prod
  oldUserPoolId: us-east-1_owgI6RY6Y

  searchBucket: ${file(../config.yml):config.searchBucket}
  searchTable: janelia-neuronbridge-search-table-${self:provider.stage}

  # Resources from burst-compute
  burstComputeStage: ${env:BURST_COMPUTE_STAGE, 'dev'}
  tasksTable: ${cf:burst-compute-${self:custom.burstComputeStage}.TasksTable}
  parallelDispatchFunction: ${cf:burst-compute-${self:custom.burstComputeStage}.DispatchLambdaFunction}
  searchBatchSize: 40
  searchParallelization: 10000
  cdsTimeoutInSeconds: 300

  appSync:
    name: neuronbridge-appsync-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: ${self:custom.cognitoUserPoolId}
    additionalAuthenticationProviders:
      - authenticationType: AWS_IAM
    schema: graphql/schema.graphql
    mappingTemplatesLocation: graphql/mapping-templates
    mappingTemplates:
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Query
        field: getSearch
        request: "dynamodb-getSearch-request-template.vtl"
        response: "dynamodb-getSearch-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Query
        field: listSearches
        request: "dynamodb-listSearches-request-template.vtl"
        response: "dynamodb-listSearches-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Query
        field: listAllSearches
        request: "dynamodb-listAllSearches-request-template.vtl"
        response: "dynamodb-listAllSearches-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Mutation
        field: createSearch
        request: "dynamodb-createSearch-request-template.vtl"
        response: "dynamodb-createSearch-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Mutation
        field: deleteSearch
        request: "dynamodb-deleteSearch-request-template.vtl"
        response: "dynamodb-deleteSearch-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Mutation
        field: updateSearch
        request: "dynamodb-updateSearch-request-template.vtl"
        response: "dynamodb-updateSearch-response-template.vtl"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: NeuronBridge_GraphQLDS_${self:provider.stage}
        description: Table containing neuron searches
        config:
          tableName: ${self:custom.searchTable}


provider:
  name: aws
  region: ${opt:region, "us-east-1"}
  stage: ${opt:stage, "dev"}
  deploymentBucket:
    name: janelia-serverless-deployments
    blockPublicAccess: true
  tags:
    PROJECT: NeuronBridge
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
  lambdaHashingVersion: 20201221
  stackTags:
    PROJECT: NeuronBridge
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
    STAGE: ${self:provider.stage}
  tracing:
    lambda: ${self:custom.tracing}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:custom.libraryBucket}"
            - "arn:aws:s3:::${self:custom.libraryBucket}/*"
            - "arn:aws:s3:::${self:custom.searchBucket}"
            - "arn:aws:s3:::${self:custom.searchBucket}/*"
            - "arn:aws:s3:::${self:custom.downloadBucket}"
            - "arn:aws:s3:::${self:custom.downloadBucket}/*"
            - "arn:aws:s3:::${self:custom.oldSearchBucket}"
            - "arn:aws:s3:::${self:custom.oldSearchBucket}/*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectTagging
          Resource:
            - "arn:aws:s3:::${self:custom.searchBucket}/"
            - "arn:aws:s3:::${self:custom.searchBucket}/*"
            - "arn:aws:s3:::${self:custom.downloadBucket}"
            - "arn:aws:s3:::${self:custom.downloadBucket}/*"
        - Effect: Allow
          Action:
            - s3:DeleteObject
          Resource:
            - "arn:aws:s3:::${self:custom.searchBucket}/*"
            - "arn:aws:s3:::${self:custom.downloadBucket}/*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeStream
            - dynamodb:DescribeTable
            - dynamodb:GetRecords
            - dynamodb:ListStreams
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:UpdateTable
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.searchTable}"
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tasksTable}"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: "*"
        - Effect: Allow
          Action:
            - states:StartExecution
          Resource: "*"
        - Effect: Allow
          Action:
            - appsync:GraphQL
          Resource: { Fn::Join: [
            "",
            [
              "arn:aws:appsync:",
              {
                Ref: "AWS::Region"
              },
              ":",
              {
                Ref: "AWS::AccountId"
              },
              ":apis/",
              {
                Fn::GetAtt: [ GraphQlApi, ApiId ]
              },
              "/*"
            ]
          ]}
        - Effect: Allow
          Action:
            - batch:DescribeJobs
            - batch:SubmitJob
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:ListUsers
          Resource:
            - "arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:custom.cognitoUserPoolId}"
            - "arn:aws:cognito-idp:${self:provider.region}:*:userpool/us-east-1_owgI6RY6Y"
        - Effect: Allow
          Action:
            - dynamodb:Scan
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.oldSearchTable}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.searchTable}"


  httpApi:
    useProviderTags: true
    payload: "2.0"
    cors: true
    authorizers:
      neuronBridgeJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:custom.cognitoUserPoolId}
        audience:
          - ${self:custom.neuronbridgeAppId}


package:
  individually: true
  exclude:
    - pom.xml
    - ./*.iml
    - .idea/**
    - target/**
    - src/test/**
    - src/main/java/**
    - src/main/resources/**
    - README.md
    - mvn*
    - deploy.sh
  include:
    - src/main/nodejs/**


functions:

  appStarter:
    runtime: nodejs12.x
    handler: src/main/nodejs/app_starter.appStarter
    memorySize: 256
    timeout: 25
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      LIBRARY_BUCKET: ${self:custom.libraryBucket}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      PARALLEL_DISPATCH_FUNCTION_ARN: ${self:custom.parallelDispatchFunction}
      SEARCH_FUNCTION: ${self:resources.Outputs.SearchLambdaFunction.Value}
      REDUCE_FUNCTION: ${self:resources.Outputs.CombinerLambdaFunction.Value}
      SEARCH_TIMEOUT_SECS: ${self:custom.cdsTimeoutInSeconds}
      BATCH_SIZE: ${self:custom.searchBatchSize}
      MAX_PARALLELISM: ${self:custom.searchParallelization}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      JOB_DEFINITION: ${file(../align/serverless.yml):service}-${self:provider.stage}-align-job-definition
      JOB_QUEUE: ${file(../align/serverless.yml):service}-${self:provider.stage}-align-job-queue-highpriority
      MAX_SEARCHES_PER_DAY: ${file(../config.yml):config.perDaySearchLimits}
      MAX_ALLOWED_CONCURRENT_SEARCHES: ${file(../config.yml):config.concurrentSearchLimits}
      MAX_ALIGNMENTS_PER_DAY: ${file(../config.yml):config.perDayAlignmentLimits}
      MAX_ALLOWED_CONCURRENT_ALIGNMENTS: ${file(../config.yml):config.concurrentAlignmentLimits}
      ALIGN_JOB_STATE_MACHINE_ARN: ${self:resources.Outputs.JobMonitorStateMachine.Value}
    events:
      - httpApi:
          method: POST
          path: /searches
          authorizer:
            name: neuronBridgeJwtAuthorizer

  cdsStarter:
    runtime: nodejs12.x
    handler: src/main/nodejs/cds_starter.cdsStarter
    memorySize: 256
    timeout: 25
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      LIBRARY_BUCKET: ${self:custom.libraryBucket}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      PARALLEL_DISPATCH_FUNCTION_ARN: ${self:custom.parallelDispatchFunction}
      SEARCH_FUNCTION: ${self:resources.Outputs.SearchLambdaFunction.Value}
      REDUCE_FUNCTION: ${self:resources.Outputs.CombinerLambdaFunction.Value}
      SEARCH_TIMEOUT_SECS: ${self:custom.cdsTimeoutInSeconds}
      BATCH_SIZE: ${self:custom.searchBatchSize}
      MAX_PARALLELISM: ${self:custom.searchParallelization}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }

  combiner:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_combiner.searchCombiner
    memorySize: 384
    timeout: ${self:custom.cdsTimeoutInSeconds}
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }

  monitor:
    runtime: nodejs12.x
    handler: src/main/nodejs/monitor.isJobDone
    memorySize: 128
    timeout: 180
    environment:
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      DEBUG: ${self:custom.debug}

  search:
    runtime: nodejs12.x
    handler: src/main/nodejs/batch_search.batchSearch
    memorySize: 256
    timeout: ${self:custom.cdsTimeoutInSeconds}
    environment:
      DEBUG: ${self:custom.debug}
      SEARCHED_IMAGES_BUCKET: ${self:custom.libraryBucket}
      SEARCHED_THUMBNAILS_BUCKET: ${self:custom.libraryThumbnailsBucket}

  searchJava:
    package:
      artifact: target/neuronbridge-search-${self:custom.version}.jar
    runtime: java8
    handler: org.janelia.colordepthsearch.BatchSearch
    memorySize: 384
    timeout: ${self:custom.cdsTimeoutInSeconds}
    environment:
      DEBUG: ${self:custom.debug}
      SEARCHED_IMAGES_BUCKET: ${self:custom.libraryBucket}
      SEARCHED_THUMBNAILS_BUCKET: ${self:custom.libraryThumbnailsBucket}

  searchCopyAlignment:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_copy.searchCopyAlignment
    memorySize: 128
    timeout: 10
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
    events:
      - httpApi:
          method: POST
          path: /copy_alignment
          authorizer:
            name: neuronBridgeJwtAuthorizer

  searchCreateDefaultChannel:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_create_default_channel.searchCreateDefaultChannel
    memorySize: 128
    timeout: 10
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
    events:
      - httpApi:
          method: POST
          path: /create_default_channel
          authorizer:
            name: neuronBridgeJwtAuthorizer

  searchNewFromImage:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_new_from_image.searchNewFromImage
    memorySize: 128
    timeout: 10
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
    events:
      - httpApi:
          method: POST
          path: /new_from_image
          authorizer:
            name: neuronBridgeJwtAuthorizer

  searchUpdate:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_update.searchUpdate
    memorySize: 128
    timeout: 25
    environment:
      DEBUG: ${self:custom.debug}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }

  downloadCreator:
    runtime: nodejs12.x
    handler: src/main/nodejs/download_creator.downloadCreator
    memorySize: 256
    timeout: 200
    # maximum timeout for an http API gateway is 29 seconds, so this
    # could bite us. Might have to resort to triggering a lambda and
    # then have the site poll for results against the dynamoDB.
    maximumEventAge: 60
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      DOWNLOAD_BUCKET: ${self:custom.downloadBucket}
      DATA_BUCKET: ${self:custom.dataBucket}
      LIBRARY_BUCKET: ${self:custom.libraryBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      IDENTITY_POOL_ID: ${self:custom.identityPoolId}
    events:
      - httpApi:
          method: POST
          path: /create_download
          authorizer:
            name: neuronBridgeJwtAuthorizer

  dataMigration:
    runtime: nodejs14.x
    handler: src/main/nodejs/data_migration.dataMigration
    memorySize: 128
    timeout: 28
    # maximum timeout for an http API gateway is 29 seconds, so this
    # could bite us. Might have to resort to triggering a lambda and
    # then have the site poll for results against the dynamoDB.
    maximumEventAge: 60
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      DOWNLOAD_BUCKET: ${self:custom.downloadBucket}
      DATA_BUCKET: ${self:custom.dataBucket}
      LIBRARY_BUCKET: ${self:custom.libraryBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      IDENTITY_POOL_ID: ${self:custom.identityPoolId}
      SEARCH_TABLE: ${self:custom.searchTable}
      USERPOOL_ID:  ${self:custom.cognitoUserPoolId}
      OLD_SEARCH_TABLE: ${self:custom.oldSearchTable}
      OLD_SEARCH_BUCKET: ${self:custom.oldSearchBucket}
      OLD_USERPOOL_ID: ${self:custom.oldUserPoolId}
    events:
      - httpApi:
          method: POST
          path: /migrate_data
          authorizer:
            name: neuronBridgeJwtAuthorizer

  migrationCheck:
    runtime: nodejs14.x
    handler: src/main/nodejs/migration_check.migrationCheck
    memorySize: 128
    timeout: 28
    # maximum timeout for an http API gateway is 29 seconds, so this
    # could bite us. Might have to resort to triggering a lambda and
    # then have the site poll for results against the dynamoDB.
    maximumEventAge: 60
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      DOWNLOAD_BUCKET: ${self:custom.downloadBucket}
      DATA_BUCKET: ${self:custom.dataBucket}
      LIBRARY_BUCKET: ${self:custom.libraryBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      IDENTITY_POOL_ID: ${self:custom.identityPoolId}
      SEARCH_TABLE: ${self:custom.searchTable}
      USERPOOL_ID:  ${self:custom.cognitoUserPoolId}
      OLD_SEARCH_TABLE: ${self:custom.oldSearchTable}
      OLD_SEARCH_BUCKET: ${self:custom.oldSearchBucket}
      OLD_USERPOOL_ID: ${self:custom.oldUserPoolId}
    events:
      - httpApi:
          method: GET
          path: /migration_check
          authorizer:
            name: neuronBridgeJwtAuthorizer




stepFunctions:
  validate: true # enable pre-deployment definition validation
  stateMachines:
    jobMonitorStateMachine:
      id: JobMonitorStateMachine
      name: jobMonitorStateMachine-${self:service}-${self:provider.stage}
      definition:
        StartAt: Monitor
        States:
          Monitor:
            Type: Task
            Resource:
              Fn::GetAtt: [monitor, Arn]
            Retry:
              - ErrorEquals:
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 100
            Next: AreWeDoneYet
          AreWeDoneYet:
            Type: Choice
            Choices:
              - Variable: "$.completed"
                BooleanEquals: true
                Next: CheckErrors
            Default: Wait
          Wait:
            Type: Wait
            Seconds: 300
            Next: Monitor
          CheckErrors:
            Type: Choice
            Choices:
              - Variable: "$.withErrors"
                BooleanEquals: true
                Next: ErrorState
            Default: EndState
          ErrorState:
            Type: Fail
            Cause: "Job completed with errors"
          EndState:
            Type: Pass
            End: true
resources:
  Outputs:
    SearchLambdaFunction:
      Description: The ARN of the search function
      Value:
        Ref: SearchLambdaFunction
    MonitorLambdaFunction:
      Description: The ARN of the monitor function
      Value:
        Ref: MonitorLambdaFunction
    CombinerLambdaFunction:
      Description: The ARN of the combiner function
      Value:
        Ref: CombinerLambdaFunction
    JobMonitorStateMachine:
      Description: The ARN of the jobMonitorStateMachine 
      Value:
        Ref: JobMonitorStateMachine
  Resources:
    SearchTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.searchTable}
    SearchBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.searchBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
              - DELETE
              AllowedHeaders:
              - "*"
              ExposedHeaders:
              - "x-amz-server-side-encryption"
              - "x-amz-request-id"
              - "x-amz-id-2"
              - "ETag"
              AllowedOrigins:
              - "*.janelia.org:3000"
              - "*.janelia.org"
              - "*.hhmi.org"
              - "*.hhmi.org:3000"
              - Fn::Join:
                - ""
                - - "http://janelia-neuronbridge-web-"
                  - ${self:provider.stage}
                  - ".s3-website-"
                  - ${self:provider.region}
                  - ".amazonaws.com"
    DownloadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.downloadBucket}
        LifecycleConfiguration:
          Rules:
            - Id: DeleteRule
              Prefix: ''
              Status: Enabled
              ExpirationInDays: '1'
