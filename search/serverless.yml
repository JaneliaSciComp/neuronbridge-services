service: janelia-neuronbridge-services

custom:
  libraryBucket: janelia-flylight-color-depth
  maskBucket: janelia-neuronbridge-masks-${self:provider.stage}
  searchBucket: janelia-neuronbridge-searches-${self:provider.stage}
  version: 1.0.0
  tracing: true

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  tags:
    PROJECT: NeuronBridge
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
  stackTags:
    PROJECT: NeuronBridge
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
  tracing:
    lambda: ${self:custom.tracing}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::${self:custom.maskBucket}"
        - "arn:aws:s3:::${self:custom.maskBucket}/*"
        - "arn:aws:s3:::${self:custom.libraryBucket}"
        - "arn:aws:s3:::${self:custom.libraryBucket}/*"
        - "arn:aws:s3:::${self:custom.searchBucket}"
        - "arn:aws:s3:::${self:custom.searchBucket}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - "arn:aws:s3:::${self:custom.libraryBucket}"
        - "arn:aws:s3:::${self:custom.libraryBucket}/*"
        - "arn:aws:s3:::${self:custom.searchBucket}/"
        - "arn:aws:s3:::${self:custom.searchBucket}/*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource: "*"

package:
  individually: true

functions:

  denormalize:
    runtime: nodejs12.x
    handler: src/main/nodejs/denormalize.denormalize
    memorySize: 128
    timeout: 300

  parallelSearch:
    package:
      artifact: target/neuronbridge-search-${self:custom.version}.jar
    runtime: java8
    handler: org.janelia.colordepthsearch.ParallelSearch
    memorySize: 256
    # 5 minute timeout
    timeout: 300
    environment:
      MASK_BUCKET: ${self:custom.maskBucket}
      LIBRARY_BUCKET: ${self:custom.libraryBucket}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      SEARCH_FUNCTION: ${self:service}-${self:provider.stage}-search
      STATE_MACHINE_ARN: ${self:resources.Outputs.SearchMonitorStateMachine.Value}

  searchDispatch:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_dispatch.searchDispatch
    memorySize: 256
    # 5 minute timeout
    timeout: 300
    environment:
      MASK_BUCKET: ${self:custom.maskBucket}
      LIBRARY_BUCKET: ${self:custom.libraryBucket}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      DISPATCH_FUNCTION: ${self:service}-${self:provider.stage}-searchDispatch
      SEARCH_FUNCTION: ${self:service}-${self:provider.stage}-search
      STATE_MACHINE_ARN: ${self:resources.Outputs.SearchMonitorStateMachine.Value}

  search:
    package:
      artifact: target/neuronbridge-search-${self:custom.version}.jar
    runtime: java8
    handler: org.janelia.colordepthsearch.BatchSearch
    memorySize: 256
    # 5 minute timeout
    timeout: 300

  monitor:
    runtime: nodejs12.x
    handler: src/main/nodejs/monitor.isSearchDone
    memorySize: 128
    # 5 minute timeout because the last iteration also runs the reduce step
    timeout: 300
    environment:
      SEARCH_TIMEOUT_SECS: 300

stepFunctions:

  stateMachines:
    searchMonitorStateMachine:
      name: searchMonitorStateMachine
      definition:
        Comment: "Monitors a parallel Color Depth Search and notifies the user upon completion"
        StartAt: Monitor
        States:
          Monitor:
            Type: Task
            Resource:
              Fn::GetAtt: [monitor, Arn]
            Retry:
              - ErrorEquals: 
                - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 100
            Next: IsTimedOut
          IsTimedOut:
            Type: Choice
            Choices:
              - Variable: "$.timedOut"
                BooleanEquals: true
                Next: TimedOut
            Default: AreWeDoneYet
          AreWeDoneYet:
            Type: Choice
            Choices:
              - Variable: "$.completed"
                BooleanEquals: true
                Next: EndState
            Default: Wait
          Wait:
            Type: Wait
            Seconds: 1
            Next: Monitor
          TimedOut:
            Type: Fail
            Cause: "Search timed out"
          EndState:
            Type: Pass
            End: true

  validate: true # enable pre-deployment definition validation


resources:

  Resources:
    S3BucketInputs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.maskBucket}

    S3BucketSearches:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.searchBucket}

  Outputs:
    SearchMonitorStateMachine:
      Description: The ARN of the state machine
      Value:
        Ref: SearchMonitorStateMachine


plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
