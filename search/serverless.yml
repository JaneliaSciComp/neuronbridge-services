service: janelia-neuronbridge-cds

plugins:
  - serverless-plugin-aws-alerts
  - serverless-appsync-plugin
  - serverless-bundle
  - serverless-deployment-bucket
  - serverless-step-functions
  - serverless-dotenv-plugin
  - ./hooks/custom-hooks-plugin.js # custom hooks plugin

custom:
  version: 3.0.0
  tracing: false
  debug: true

  nodeJSRuntime: nodejs16.x

  downloadBucket: ${file(../config.yml):config.downloadBucket}
  dataBucket: ${file(../config.yml):config.dataBucket}

  libraryBucketSuffixes:
    prod: ''
    val: ''
    other: -${self:provider.stage}
  libraryStageBucket: janelia-flylight-color-depth${self:custom.libraryBucketSuffixes.${self:provider.stage}, self:custom.libraryBucketSuffixes.other}
  libraryThumbStageBucket: janelia-flylight-color-depth-thumbnails${self:custom.libraryBucketSuffixes.${self:provider.stage}, self:custom.libraryBucketSuffixes.other}

  libraryBucket: ${env:IMAGE_DATA_BUCKET, self:custom.libraryStageBucket}
  libraryThumbnailsBucket: ${env:IMAGE_THUMBNAILS_BUCKET, self:custom.libraryThumbStageBucket}

  pppmBucket: ${env:PPPM_DATA_BUCKET, file(../config.yml):config.pppmBucket}

  oldSearchTable: janelia-neuronbridge-search-table-prod
  oldSearchBucket: janelia-neuronbridge-searches-prod
  oldClientId: 4ham9v2s8c0d9v9mdm7vk3fggp

  searchBucket: ${file(../config.yml):config.searchBucket}
  searchTable: janelia-neuronbridge-${self:provider.stage}-search-table
  announcementsTable: janelia-neuronbridge-${self:provider.stage}-announcments
  preferencesTable: janelia-neuronbridge-${self:provider.stage}-preferences
  publishingDOITable: janelia-neuronbridge-publishing-doi
  publishedLMStacksTable: janelia-neuronbridge-published-stacks
  publishedEMSkeletonsTable: janelia-neuronbridge-published-skeletons

  # Resources from burst-compute
  burstComputeStage: ${env:BURST_COMPUTE_STAGE, self:provider.stage}
  tasksTable: ${cf:burst-compute-${self:custom.burstComputeStage}.TasksTable}
  parallelDispatchFunction: ${cf:burst-compute-${self:custom.burstComputeStage}.DispatchLambdaFunction}
  searchBatchSize: ${file(../config.yml):config.searchBatchSize}
  searchParallelization: ${file(../config.yml):config.searchParallelization}
  cdsTimeoutInSeconds: ${file(../config.yml):config.cdsTimeoutInSeconds}

  # publishedNameTable uses a data version instead of prod or dev, so we have to map
  # the data version to the stage in use, using the mapping below.
  publishedNamesTable: janelia-neuronbridge-published-${env:PUBLISHED_NAMES_TABLE_SUFFIX, file(../config.yml):config.publishedNamesDb.${self:provider.stage}, file(../config.yml):config.publishedNamesDb.other}

  curatedMatchesTable: janelia-neuronbridge-custom-annotations

  # we shouldn't need backups on any stage apart from production.
  enableBackups: ${file(../config.yml):config.enableBackups}

  maxCustomColorDepthSearchResults: ${env:MAX_CUSTOM_RESULTS, 400}

  # determines if users can create their own account on a site
  disableAccountCreation: ${file(../config.yml):config.disableAccountCreation}

  # if an environment variable is set to an existing user pool ID
  # the stack will not create a user pool and use the one provided
  # similarly if an environment is set to a user pool client ID
  # and/or an identity pool
  # the stack will use the provided user pool client
  # and/or the provided identity pool
  existingUserPoolId: ${env:USER_POOL_ID, ''}
  newUserPoolId: !Ref CognitoUserPool
  userPoolId: ${env:USER_POOL_ID, self:custom.newUserPoolId}
  # settigs for reusing a user pool client
  existingUserPoolClientId: ${env:USER_POOL_CLIENT_ID, ''}
  newUserPoolClientId: !Ref CognitoUserPoolClient
  userPoolClientId: ${env:USER_POOL_CLIENT_ID, self:custom.newUserPoolClientId}
  # settigs for reusing an identity pool
  existingIdentityPoolId: ${env:IDENTITY_POOL_ID, ''}
  newIdentityPoolId:  !Ref CognitoIdentityPool
  identityPoolId: ${env:IDENTITY_POOL_ID, self:custom.newIdentityPoolId}

  alertEmail: ${env:ALERT_EMAIL, 'goinac@janelia.hhmi.org'}

  alerts:
    stages:
      - dev
      - prod

    dashboards: true

    topics:
      monitoredAlarms:
        alarm:
          topic:  ${self:service}-${self:provider.stage}-monitoredAlarms
          notifications:
          - protocol: email
            endpoint: ${self:custom.alertEmail}

useDotenv: true

provider:
  name: aws
  region: ${opt:region, "us-east-1"}
  stage: ${opt:stage, "dev"}
  deploymentBucket:
    name: janelia-serverless-deployments
    blockPublicAccess: true
  tags:
    PROJECT: NeuronBridge
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
  stackTags:
    PROJECT: NeuronBridge
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
    STAGE: ${self:provider.stage}
  tracing:
    lambda: ${self:custom.tracing}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:GetObjectTagging
          Resource:
            - "arn:aws:s3:::janelia-flylight-color-depth/*"
            - "arn:aws:s3:::janelia-flylight-color-depth-prodpre/*"
            - "arn:aws:s3:::janelia-flylight-color-depth-dev/*"
            - "arn:aws:s3:::janelia-flylight-color-depth-devpre/*"
            - "arn:aws:s3:::janelia-flylight-color-depth-thumbnails/*"
            - "arn:aws:s3:::janelia-flylight-color-depth-thumbnails-dev/*"
            - "arn:aws:s3:::janelia-flylight-color-depth-thumbnails-devpre/*"
            - "arn:aws:s3:::janelia-flylight-color-depth-thumbnails-prodpre/*"
            - "arn:aws:s3:::${self:custom.searchBucket}/*"
            - "arn:aws:s3:::${self:custom.downloadBucket}/*"
            - "arn:aws:s3:::${self:custom.oldSearchBucket}/*"
            - "arn:aws:s3:::${self:custom.dataBucket}/*"
            - "arn:aws:s3:::${self:custom.pppmBucket}/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::janelia-flylight-color-depth"
            - "arn:aws:s3:::janelia-flylight-color-depth-prodpre"
            - "arn:aws:s3:::janelia-flylight-color-depth-dev"
            - "arn:aws:s3:::janelia-flylight-color-depth-devpre"
            - "arn:aws:s3:::janelia-flylight-color-depth-thumbnails"
            - "arn:aws:s3:::janelia-flylight-color-depth-thumbnails-dev"
            - "arn:aws:s3:::janelia-flylight-color-depth-thumbnails-devpre"
            - "arn:aws:s3:::janelia-flylight-color-depth-thumbnails-prodpre"
            - "arn:aws:s3:::${self:custom.searchBucket}"
            - "arn:aws:s3:::${self:custom.downloadBucket}"
            - "arn:aws:s3:::${self:custom.oldSearchBucket}"
            - "arn:aws:s3:::${self:custom.dataBucket}"
            - "arn:aws:s3:::${self:custom.pppmBucket}"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectTagging
          Resource:
            - "arn:aws:s3:::${self:custom.searchBucket}/"
            - "arn:aws:s3:::${self:custom.searchBucket}/*"
            - "arn:aws:s3:::${self:custom.downloadBucket}"
            - "arn:aws:s3:::${self:custom.downloadBucket}/*"
        - Effect: Allow
          Action:
            - s3:DeleteObject
          Resource:
            - "arn:aws:s3:::${self:custom.searchBucket}/*"
            - "arn:aws:s3:::${self:custom.downloadBucket}/*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeStream
            - dynamodb:DescribeTable
            - dynamodb:GetRecords
            - dynamodb:ListStreams
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:UpdateTable
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.searchTable}"
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tasksTable}"
        - Effect: "Allow"
          Action:
            - dynamodb:Query
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.publishedLMStacksTable}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.publishedEMSkeletonsTable}"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: "*"
        - Effect: Allow
          Action:
            - states:StartExecution
          Resource: "*"
        - Effect: Allow
          Action:
            - appsync:GraphQL
          Resource: { Fn::Join: [
            "",
            [
              "arn:aws:appsync:",
              {
                Ref: "AWS::Region"
              },
              ":",
              {
                Ref: "AWS::AccountId"
              },
              ":apis/",
              {
                Fn::GetAtt: [ GraphQlApi, ApiId ]
              },
              "/*"
            ]
          ]}
        - Effect: Allow
          Action:
            - batch:DescribeJobs
            - batch:SubmitJob
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:ListUsers
          Resource:
            - { Fn::Join: [
              "",
              [
                "arn:aws:cognito-idp:",
                {
                  Ref: "AWS::Region"
                },
                ":*:userpool/",
                "${self:custom.userPoolId}"
              ]
            ]}
        - Effect: Allow
          Action:
            - dynamodb:Scan
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.oldSearchTable}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.searchTable}"


  httpApi:
    payload: "2.0"
    cors: true
    authorizers:
      neuronBridgeJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: { Fn::Join: [
          "",
          [
            "https://cognito-idp.",
            {
              Ref: "AWS::Region"
            },
            ".amazonaws.com/",
            "${self:custom.userPoolId}"
          ]
        ]}
        audience: "${self:custom.userPoolClientId}"


package:
  individually: true
  patterns:
    - 'src/main/nodejs/**'
    - 'cds_config.json'


appSync:
  name: neuronbridge-appsync-${self:provider.stage}
  authentication:
    type: AMAZON_COGNITO_USER_POOLS
    config:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: ${self:custom.userPoolId}
  additionalAuthentications:
    - type: AWS_IAM
  schema: graphql/schema.graphql
  resolvers:
    getSearch:
      dataSource: NeuronBridge_GraphQLDS
      type: Query
      field: getSearch
      kind: UNIT
      request: "graphql/mapping-templates/dynamodb-getSearch-request-template.vtl"
      response: "graphql/mapping-templates/dynamodb-getSearch-response-template.vtl"
    listSearches:
      dataSource: NeuronBridge_GraphQLDS
      type: Query
      field: listSearches
      kind: UNIT
      request: "graphql/mapping-templates/dynamodb-listSearches-request-template.vtl"
      response: "graphql/mapping-templates/dynamodb-listSearches-response-template.vtl"
    listAllSearches:
      dataSource: NeuronBridge_GraphQLDS
      type: Query
      field: listAllSearches
      kind: UNIT
      request: "graphql/mapping-templates/dynamodb-listAllSearches-request-template.vtl"
      response: "graphql/mapping-templates/dynamodb-listAllSearches-response-template.vtl"
    listItemsByOwner:
      dataSource: NeuronBridge_GraphQLDS
      type: Query
      field: listItemsByOwner
      kind: UNIT
      request: "graphql/mapping-templates/dynamodb-listItemsByOwner-request-template.vtl"
      response: "graphql/mapping-templates/dynamodb-listItemsByOwner-response-template.vtl"
    createSearch:
      dataSource: NeuronBridge_GraphQLDS
      type: Mutation
      field: createSearch
      kind: UNIT
      request: "graphql/mapping-templates/dynamodb-createSearch-request-template.vtl"
      response: "graphql/mapping-templates/dynamodb-createSearch-response-template.vtl"
    deleteSearch:
      dataSource: NeuronBridge_GraphQLDS
      type: Mutation
      field: deleteSearch
      kind: UNIT
      request: "graphql/mapping-templates/dynamodb-deleteSearch-request-template.vtl"
      response: "graphql/mapping-templates/dynamodb-deleteSearch-response-template.vtl"
    updateSearch:
      dataSource: NeuronBridge_GraphQLDS
      type: Mutation
      field: updateSearch
      kind: UNIT
      request: "graphql/mapping-templates/dynamodb-updateSearch-request-template.vtl"
      response: "graphql/mapping-templates/dynamodb-updateSearch-response-template.vtl"
  dataSources:
    NeuronBridge_GraphQLDS:
      type: AMAZON_DYNAMODB
      description: Table containing neuron searches
      config:
        tableName: ${self:custom.searchTable}


functions:

  appStarter:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/app_starter.appStarter
    memorySize: 256
    timeout: 25
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      ALIGN_JOB_STATE_MACHINE_ARN: !Ref JobMonitorStateMachine
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      BATCH_SIZE: ${self:custom.searchBatchSize}
      DEBUG: ${self:custom.debug}
      BRAIN_ALIGN_JOB_DEFINITION: ${file(../align/serverless.yml):service}-${self:provider.stage}-brain-job-definition
      VNC_ALIGN_JOB_DEFINITION: ${file(../align/serverless.yml):service}-${self:provider.stage}-vnc-job-definition
      JOB_QUEUE: ${file(../align/serverless.yml):service}-${self:provider.stage}-job-queue
      MAX_ALIGNMENTS_PER_DAY: ${file(../config.yml):config.perDayAlignmentLimits}
      MAX_ALLOWED_CONCURRENT_ALIGNMENTS: ${file(../config.yml):config.concurrentAlignmentLimits}
      MAX_ALLOWED_CONCURRENT_SEARCHES: ${file(../config.yml):config.concurrentSearchLimits}
      MAX_PARALLELISM: ${self:custom.searchParallelization}
      MAX_SEARCHES_PER_DAY: ${file(../config.yml):config.perDaySearchLimits}
      PARALLEL_DISPATCH_FUNCTION_ARN: ${self:custom.parallelDispatchFunction}
      REDUCE_FUNCTION: !Ref CombinerLambdaFunction
      DATA_BUCKET: ${self:custom.dataBucket}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      SEARCH_FUNCTION: !Ref SearchLambdaFunction
      SEARCH_TIMEOUT_SECS: ${self:custom.cdsTimeoutInSeconds}
      STAGE: ${self:provider.stage}
    events:
      - httpApi:
          method: POST
          path: /searches
          authorizer:
            name: neuronBridgeJwtAuthorizer
    alarms:
      - name: searchInvocationsAlarm
        type: anomalyDetection
        namespace: 'AWS/Lambda'
        metric: Invocations
        # the threshold is completely empirical 
        # when I had 8 simultaneous calls there was no timeout
        # so I am trying to see if I can correlate this with access errors
        threshold: 8
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanUpperThreshold
        alarmActions:
          - monitoredAlarms

  combiner:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/search_combiner.searchCombiner
    memorySize: 384
    timeout: ${self:custom.cdsTimeoutInSeconds}
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      MAX_CUSTOM_RESULTS: ${self:custom.maxCustomColorDepthSearchResults}
      LM_PUBLISHED_STACKS_TABLE: ${self:custom.publishedLMStacksTable}
      EM_PUBLISHED_SKELETONS_TABLE: ${self:custom.publishedEMSkeletonsTable}
    alarms:
      - name: fatalErrorsAlarm
        namespace: 'AWS/Lambda'
        actionsEnabled: true
        metric: fatalErrors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        pattern: 'fatal errors'
        alarmActions:
          - monitoredAlarms

  monitor:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/monitor.isJobDone
    memorySize: 128
    timeout: 180
    environment:
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      DEBUG: ${self:custom.debug}

  search:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/batch_search.batchSearch
    memorySize: 640
    timeout: ${self:custom.cdsTimeoutInSeconds}
    environment:
      DEBUG: ${self:custom.debug}
      NODE_OPTIONS: '--max-old-space-size=480'
    alarms:
      - name: mipsAccessErrors
        namespace: 'AWS/Lambda'
        actionsEnabled: true
        metric: mipsAccessErrors
        threshold: 1
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        pattern: '{$.code = "SlowDown" && $.statusCode = 503}'
        alarmActions:
          - monitoredAlarms

  searchCopyAlignment:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/search_copy.searchCopyAlignment
    memorySize: 128
    timeout: 10
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
    events:
      - httpApi:
          method: POST
          path: /copy_alignment
          authorizer:
            name: neuronBridgeJwtAuthorizer

  searchCreateDefaultChannel:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/search_create_default_channel.searchCreateDefaultChannel
    memorySize: 128
    timeout: 10
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
    events:
      - httpApi:
          method: POST
          path: /create_default_channel
          authorizer:
            name: neuronBridgeJwtAuthorizer

  searchNewFromImage:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/search_new_from_image.searchNewFromImage
    memorySize: 128
    timeout: 10
    maximumEventAge: 120
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
    events:
      - httpApi:
          method: POST
          path: /new_from_image
          authorizer:
            name: neuronBridgeJwtAuthorizer

  searchUpdate:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/search_update.searchUpdate
    memorySize: 128
    timeout: 25
    environment:
      DEBUG: ${self:custom.debug}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }

  downloadCreator:
    runtime: ${self:custom.nodeJSRuntime}
    handler: src/main/nodejs/download_creator.downloadCreator
    memorySize: 256
    timeout: 29
    # maximum timeout for an http API gateway is 29 seconds, so this
    # could bite us. Might have to resort to triggering a lambda and
    # then have the site poll for results against the dynamoDB.
    maximumEventAge: 60
    maximumRetryAttempts: 1
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      DOWNLOAD_BUCKET: ${self:custom.downloadBucket}
      DATA_BUCKET: ${self:custom.dataBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      IDENTITY_POOL_ID: ${self:custom.userPoolClientId}
      STAGE: ${self:provider.stage}
    events:
      - httpApi:
          method: POST
          path: /create_download
          authorizer:
            name: neuronBridgeJwtAuthorizer

  curatedMatches:
    runtime: ${self:custom.nodeJSRuntime}
    timeout: 10
    role: curatedMatches
    handler: src/main/nodejs/curated_matches.curatedMatches
    environment:
      DEBUG: ${self:custom.debug}
      CURATED_TABLE: ${self:custom.curatedMatchesTable}
    events:
      - httpApi:
          method: GET
          path: /curated_matches
          authorizer:
            name: neuronBridgeJwtAuthorizer



  publishedNames:
    runtime: ${self:custom.nodeJSRuntime}
    timeout: 10
    role: publishedNames
    handler: src/main/nodejs/published_names.publishedNames
    environment:
      DEBUG: ${self:custom.debug}
      NAMES_TABLE: ${self:custom.publishedNamesTable}
      ITEM_LIMIT: 100
    events:
      - httpApi:
          method: GET
          path: /published_names
          authorizer:
            name: neuronBridgeJwtAuthorizer

  publishingDOI:
    runtime: ${self:custom.nodeJSRuntime}
    timeout: 10
    role: publishingDOI
    handler: src/main/nodejs/publishingDOI.publishingDOI
    environment:
      DEBUG: ${self:custom.debug}
      NAMES_TABLE: ${self:custom.publishingDOITable}
      ITEM_LIMIT: 100
    events:
      - httpApi:
          method: GET
          path: /publishing_dois
          authorizer:
            name: neuronBridgeJwtAuthorizer


  preferences:
    runtime: ${self:custom.nodeJSRuntime}
    timeout: 10
    role: preferencesRole
    handler: src/main/nodejs/preferences.handler
    environment:
      DEBUG: ${self:custom.debug}
      TABLE: ${self:custom.preferencesTable}
    events:
      - httpApi:
          method: GET
          path: /preferences
          authorizer:
            name: neuronBridgeJwtAuthorizer
      - httpApi:
          method: POST
          path: /preferences
          authorizer:
            name: neuronBridgeJwtAuthorizer
      - httpApi:
          method: DELETE
          path: /preferences
          authorizer:
            name: neuronBridgeJwtAuthorizer

  announcements:
    runtime: ${self:custom.nodeJSRuntime}
    timeout: 10
    role: announcementsRole
    handler: src/main/nodejs/announcements.announcements
    environment:
      DEBUG: ${self:custom.debug}
      TABLE: ${self:custom.announcementsTable}
    events:
      - httpApi:
          method: GET
          path: /announcements
          authorizer:
            name: neuronBridgeJwtAuthorizer
      - httpApi:
          method: POST
          path: /announcements
          authorizer:
            name: neuronBridgeJwtAuthorizer
      - httpApi:
          method: DELETE
          path: /announcements/{createdTime}
          authorizer:
            name: neuronBridgeJwtAuthorizer

  mailinglist:
    runtime: ${self:custom.nodeJSRuntime}
    timeout: 10
    role: mailinglistRole
    handler: src/main/nodejs/mailinglist.handler
    environment:
      DEBUG: ${self:custom.debug}
      TABLE: ${self:custom.preferencesTable}
      COGNITOPOOLID: ${self:custom.userPoolId}
    events:
      - httpApi:
          method: GET
          path: /mailinglist
          authorizer:
            name: neuronBridgeJwtAuthorizer

  # lambda function to migrate v2.x searches to v3.x
  searchMigration:
    runtime: ${self:custom.nodeJSRuntime}
    timeout: 600
    role: searchMigration
    handler: src/main/nodejs/search_migration.searchMigration
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_TABLE: ${self:custom.searchTable}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      LM_PUBLISHED_STACKS_TABLE: ${self:custom.publishedLMStacksTable}
      EM_PUBLISHED_SKELETONS_TABLE: ${self:custom.publishedEMSkeletonsTable}

stepFunctions:
  validate: true # enable pre-deployment definition validation
  stateMachines:
    jobMonitorStateMachine:
      id: JobMonitorStateMachine
      name: jobMonitorStateMachine-${self:service}-${self:provider.stage}
      definition:
        StartAt: Monitor
        States:
          Monitor:
            Type: Task
            Resource:
              Fn::GetAtt: [monitor, Arn]
            Retry:
              - ErrorEquals:
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 100
            Next: AreWeDoneYet
          AreWeDoneYet:
            Type: Choice
            Choices:
              - Variable: "$.completed"
                BooleanEquals: true
                Next: CheckErrors
            Default: Wait
          Wait:
            Type: Wait
            Seconds: 300
            Next: Monitor
          CheckErrors:
            Type: Choice
            Choices:
              - Variable: "$.withErrors"
                BooleanEquals: true
                Next: ErrorState
            Default: EndState
          ErrorState:
            Type: Fail
            Cause: "Job completed with errors"
          EndState:
            Type: Pass
            End: true

resources:
  - ${file(sls_resources/cognito-pools.yml)}
  - ${file(sls_resources/buckets.yml)}
  - ${file(sls_resources/outputs.yml)}
  - ${file(sls_resources/dynamodb.yml)}
  - ${file(sls_resources/iam_roles.yml)}
