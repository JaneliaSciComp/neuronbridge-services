service: janelia-neuronbridge-services


plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-appsync-plugin


custom:
  libraryBucket: janelia-flylight-color-depth-dev
  libraryThumbnailsBucket: janelia-flylight-color-depth-thumbnails-dev
  searchBucket: janelia-neuronbridge-searches-dev
  searchTable: janelia-neuronbridge-search-table-${self:provider.stage}
  cognitoUserPoolId: us-east-1_owgI6RY6Y
  neuronbridgeAppId: 4ham9v2s8c0d9v9mdm7vk3fggp
  cdsTimeoutInSeconds: 300
  version: 2.0.0
  tracing: true
  debug: true
  appSync:
    name: neuronbridge-appsync-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: ${self:custom.cognitoUserPoolId}
    additionalAuthenticationProviders:
      - authenticationType: AWS_IAM
    schema: graphql/schema.graphql
    mappingTemplatesLocation: graphql/mapping-templates
    mappingTemplates:
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Query
        field: getSearch
        request: "dynamodb-getSearch-request-template.vtl"
        response: "dynamodb-getSearch-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Query
        field: listSearches
        request: "dynamodb-listSearches-request-template.vtl"
        response: "dynamodb-listSearches-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Mutation
        field: createSearch
        request: "dynamodb-createSearch-request-template.vtl"
        response: "dynamodb-createSearch-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Mutation
        field: deleteSearch
        request: "dynamodb-deleteSearch-request-template.vtl"
        response: "dynamodb-deleteSearch-response-template.vtl"
      - dataSource: NeuronBridge_GraphQLDS_${self:provider.stage}
        type: Mutation
        field: updateSearch
        request: "dynamodb-updateSearch-request-template.vtl"
        response: "dynamodb-updateSearch-response-template.vtl"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: NeuronBridge_GraphQLDS_${self:provider.stage}
        description: Table containing neuron searches
        config:
          tableName: ${self:custom.searchTable}


provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'cgdev'}
  tags:
    PROJECT: NeuronBridge
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
  stackTags:
    PROJECT: NeuronBridge
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
  tracing:
    lambda: ${self:custom.tracing}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::${self:custom.libraryBucket}"
        - "arn:aws:s3:::${self:custom.libraryBucket}/*"
        - "arn:aws:s3:::${self:custom.searchBucket}"
        - "arn:aws:s3:::${self:custom.searchBucket}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - "arn:aws:s3:::${self:custom.searchBucket}/"
        - "arn:aws:s3:::${self:custom.searchBucket}/*"
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.searchTable}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource: "*"
    - Effect: Allow
      Action:
        - appsync:GraphQL
      Resource: { Fn::Join: [
        "",
        [
          "arn:aws:appsync:",
          {
            Ref: "AWS::Region"
          },
          ":",
          {
            Ref: "AWS::AccountId"
          },
          ":apis/",
          {
            Fn::GetAtt: [ GraphQlApi, ApiId ]
          },
          "/*"
        ]
      ]}
  httpApi:
    cors: true
    authorizers:
      neuronBridgeJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:custom.cognitoUserPoolId}
        audience:
          - ${self:custom.neuronbridgeAppId}


package:
  individually: true
  exclude:
    - pom.xml
    - ./*.iml
    - .idea/**
    - target/**
    - src/test/**
    - src/main/java/**
    - src/main/resources/**
  include:
    - src/main/nodejs/**


functions:

  denormalize:
    runtime: nodejs12.x
    handler: src/main/nodejs/denormalize.denormalize
    memorySize: 128
    timeout: 900

  searchStarter:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_starter.searchStarter
    memorySize: 256
    timeout: 25
    environment:
      DEBUG: ${self:custom.debug}
      SEARCH_DISPATCH_FUNCTION: ${self:service}-${self:provider.stage}-searchDispatch
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
    events:
      - httpApi:
          method: POST
          path: /searches
          cors: true
          authorizer:
            name: neuronBridgeJwtAuthorizer
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - SearchTable
              - StreamArn
          batchSize: 1

  searchDispatch:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_dispatch.searchDispatch
    memorySize: 256
    # 5 minute timeout
    timeout: 300
    environment:
      LIBRARY_BUCKET: ${self:custom.libraryBucket}
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      SEARCH_DISPATCH_FUNCTION: ${self:service}-${self:provider.stage}-searchDispatch
      SEARCH_FUNCTION: ${self:service}-${self:provider.stage}-search
      STATE_MACHINE_ARN: ${self:resources.Outputs.SearchMonitorStateMachine.Value}
      DEBUG: ${self:custom.debug}

  search:
    package:
      artifact: target/neuronbridge-search-${self:custom.version}.jar
    runtime: java8
    handler: org.janelia.colordepthsearch.BatchSearch
    memorySize: 256
    # 5 minute timeout
    timeout: 300
    environment:
      SEARCHED_IMAGES_BUCKET: ${self:custom.libraryBucket}
      SEARCHED_THUMBNAILS_BUCKET: ${self:custom.libraryThumbnailsBucket}

  monitor:
    runtime: nodejs12.x
    handler: src/main/nodejs/monitor.isSearchDone
    memorySize: 128
    # 5 minute timeout because the last iteration also runs the reduce step
    timeout: 300
    environment:
      SEARCH_TIMEOUT_SECS: ${self:custom.cdsTimeoutInSeconds}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      DEBUG: ${self:custom.debug}

  searchReduce:
    runtime: nodejs12.x
    handler: src/main/nodejs/search_reducer.searchReducer
    memorySize: 256
    # 5 minute timeout
    timeout: 300
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      SEARCH_BUCKET: ${self:custom.searchBucket}
      APPSYNC_API_URL: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ] }
      DEBUG: ${self:custom.debug}

  em2lmGradScorer:
    package:
      artifact: target/neuronbridge-search-${self:custom.version}.jar
    runtime: java8
    handler: org.janelia.colordepthsearch.AWSLambdaEM2LMGradientScoreCalc
    memorySize: 256
    # 5 minute timeout
    timeout: 300


stepFunctions:

  stateMachines:
    searchMonitorStateMachine:
      id: SearchMonitorStateMachine
      name: searchMonitorStateMachine-${self:service}-${self:provider.stage}
      definition:
        Comment: "Monitors a parallel Color Depth Search and notifies the user upon completion"
        StartAt: Monitor
        States:
          Monitor:
            Type: Task
            Resource:
              Fn::GetAtt: [monitor, Arn]
            Retry:
              - ErrorEquals: 
                - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 100
            Next: IsTimedOut
          IsTimedOut:
            Type: Choice
            Choices:
              - Variable: "$.timedOut"
                BooleanEquals: true
                Next: TimedOut
            Default: AreWeDoneYet
          AreWeDoneYet:
            Type: Choice
            Choices:
              - Variable: "$.completed"
                BooleanEquals: true
                Next: Reduce
            Default: Wait
          Wait:
            Type: Wait
            Seconds: 30
            Next: Monitor
          TimedOut:
            Type: Fail
            Cause: "Search timed out"
          Reduce:
            Type: Task
            Resource:
              Fn::GetAtt: [searchReduce, Arn]
            Next: EndState
          EndState:
            Type: Pass
            End: true

  validate: true # enable pre-deployment definition validation


resources:

  Outputs:
    SearchMonitorStateMachine:
      Description: The ARN of the state machine
      Value:
        Ref: SearchMonitorStateMachine

  Resources:
    SearchTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: KEYS_ONLY
        TableName: ${self:custom.searchTable}

