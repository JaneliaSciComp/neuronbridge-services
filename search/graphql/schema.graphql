schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    getSearch(id: ID!): Search @aws_cognito_user_pools @aws_iam
    listSearches(filter: SearchFilterInput, limit: Int, nextToken: String): SearchConnection @aws_cognito_user_pools @aws_iam
}

type Mutation {
    createSearch(input: CreateSearchInput!): Search @aws_cognito_user_pools @aws_iam
    deleteSearch(input: DeleteSearchInput!): Search @aws_cognito_user_pools @aws_iam
    updateSearch(input: UpdateSearchInput!): Search @aws_cognito_user_pools @aws_iam
}

type Search @aws_cognito_user_pools @aws_iam {
    id: ID!
    step: Int
    owner: String
    identityId: String!
    createdOn: AWSDateTime
    updatedOn: AWSDateTime
    upload: String!
    searchDir: String!
    searchType: SearchType
    algorithm: Algorithm
    mimeType: String
    nBatches: Int
    completedBatches: Int
    cdsStarted: AWSDateTime
    cdsFinished: AWSDateTime
}

type SearchConnection @aws_cognito_user_pools @aws_iam {
    items: [Search]
    nextToken: String
}

type Subscription {
    onCreateSearch(createdOn: String, id: ID, step: Int): Search @aws_subscribe(mutations : ["createSearch"])
    onDeleteSearch(id: ID, step: Int): Search @aws_subscribe(mutations : ["deleteSearch"])
    onUpdateSearch(id: ID, step: Int): Search @aws_subscribe(mutations : ["updateSearch"])
}

enum Algorithm {
    avg
    max
}

enum SearchType {
    em2lm
    lm2em
}

input CreateSearchInput {
    owner: String
    identityId: String!
    searchType: SearchType!
    searchDir: String!
    upload: String!
    algorithm: Algorithm!
    mimeType: String
}

input DeleteSearchInput {
    id: ID!
}

input SearchFilterInput {
    conditions: [ConditionInput!]
}

input ConditionInput {
    kind: TypeCondition!
    andConditions: [AndConditionInput!]
    orConditions: [OrConditionInput!]
}

enum TypeCondition {
    andOp
    orOp
}

input AndConditionInput {
    conditions: [ComparisonInput!]
}

input OrConditionInput {
    conditions: [ComparisonInput!]
}

input ComparisonInput {
    kind: TypeOperator!
    intComparison: IntComparisonInput
    stringComparison: StringComparisonInput
    idComparison: IDComparisonInput
}

enum TypeOperator {
    intOp
    stringOp
    idOp
}

enum ComparisonOperator {
    contains
    eq
    ge
    gt
    le
    lt
    ne
    notContains
}

input IntComparisonInput {
    name: String!
    op: ComparisonOperator!
    value: Int!
}

input StringComparisonInput {
    name: String!
    op: ComparisonOperator!
    value: String!
}

input IDComparisonInput {
    name: String!
    op: ComparisonOperator!
    value: ID!
}

input UpdateSearchInput {
    id: ID!
    step: Int
    nBatches: Int
    completedBatches: Int
    cdsStarted: AWSDateTime
    cdsFinished: AWSDateTime
}
