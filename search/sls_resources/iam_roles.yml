Resources:

  preferencesRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ${self:service}-${self:provider.stage}-preferences
      Description: Allow preferences lambda to read/write DynamoDB
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-preferences
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:PutItem"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.preferencesTable}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  mailinglistRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ${self:service}-${self:provider.stage}-mailinglist
      Description: Allow mailinglist lambda to read DynamoDB & cognito pool
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-mailinglist-dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.preferencesTable}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: ${self:service}-${self:provider.stage}-mailinglist-cognito
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                  - "cognito-idp:AdminGetUser"
                  - "cognito-idp:ListUsers"
                Resource:
                  - { Fn::Join: [
                    "",
                    [
                      "arn:aws:cognito-idp:",
                      {
                        Ref: "AWS::Region"
                      },
                      ":",
                      {
                        Ref: "AWS::AccountId"
                      },
                      ":userpool/",
                      {
                        Ref: CognitoUserPool
                      }
                    ]
                  ]}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  announcementsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ${self:service}-${self:provider.stage}-announcements
      Description: Allow annotations lambda to read/write DynamoDB
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-announcements
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:PutItem"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.announcementsTable}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  publishingDOI:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ${self:service}-${self:provider.stage}-publishingDOI
      Description: Allow publishing DOIs lambda to read/write DynamoDB
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-publishingDOI
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.publishingDOITable}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  searchMigration:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ${self:service}-${self:provider.stage}-searchMigration
      Description: Allow searchMigration lambda to read/write DynamoDB and S3
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-searchMigration
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.searchTable}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:HeadObject
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource:
                  - "arn:aws:s3:::${self:custom.searchBucket}/"
                  - "arn:aws:s3:::${self:custom.searchBucket}/*"
              - Effect: "Allow"
                Action:
                  - dynamodb:Query
                Resource:
                  - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.publishedLMStacksTable}"
                  - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.publishedEMSkeletonsTable}"

  publishedNames:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ${self:service}-${self:provider.stage}-publishedNames
      Description: Allow published names lambda to read/write DynamoDB
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-publishedNames
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.publishedNamesTable}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  curatedMatches:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ${self:service}-${self:provider.stage}-curatedMatches
      Description: Allow curated matches lambda to read/write DynamoDB
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-curatedMatches
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.curatedMatchesTable}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  dataMigrationRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ${self:service}-${self:provider.stage}-dataMigrationRole
      Description: Allow the data migration code to read/write DynamoDB
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-dataMigration
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Query"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.oldSearchTable}
              - Effect: Allow
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                Resource: !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:custom.searchTable}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminInitiateAuth"
                  - "cognito-idp:AdminGetUser"
                  - "cognito-idp:ListUsers"
                Resource:
                  - { Fn::Join: [
                    "",
                    [
                      "arn:aws:cognito-idp:",
                      {
                        Ref: "AWS::Region"
                      },
                      ":",
                      {
                        Ref: "AWS::AccountId"
                      },
                      ":userpool/",
                      {
                        Ref: CognitoUserPool
                      }
                    ]
                  ]}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:ListBucket
                Resource:
                  - "arn:aws:s3:::${self:custom.oldSearchBucket}"
                  - "arn:aws:s3:::${self:custom.oldSearchBucket}/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource:
                  - "arn:aws:s3:::${self:custom.searchBucket}/"
                  - "arn:aws:s3:::${self:custom.searchBucket}/*"
