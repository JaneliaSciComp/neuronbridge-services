service: janelia-neuronbridge-align


plugins:
  - serverless-pseudo-parameters


custom:
  alignmentTemplatesBucket: ${file(../config.yml):config.alignmentTemplatesBucket}
  alignmentTemplatesFolder: alignment_templates
  alignInputBucket: ${file(../config.yml):config.searchBucket}
  alignOutputBucket: ${file(../config.yml):config.searchBucket}
  version: ${file(../config.yml):config.version}
  debug: ${file(../config.yml):config.debug}
  securityGroupId: sg-963ee8df
  subnetId: subnet-5e11c814
  ec2AlignmentImageId: ami-0d3f5e4624981ef1b
  alignmentContainerImage: janeliascicomp/neuronbridge-aligner:1.0
  defaultAlignmentThreads: 16
  sshKeyPairName: ec2_batch


provider:
  name: aws
  region: ${opt:region, "us-east-1"}
  stage: ${file(../config.yml):config.stage}
  tags:
    PROJECT: ${file(../config.yml):config.project}
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
  stackTags:
    PROJECT: ${file(../config.yml):config.project}
    VERSION: ${self:custom.version}
    DEVELOPER: ${env:USER}
    STAGE: ${self:provider.stage}


package:
  exclude:
    - node_modules/**


resources:

  Resources:

    ComputeAlignmentSpotEnv:
      Type: AWS::Batch::ComputeEnvironment
      Properties:
        Type: MANAGED
        State: ENABLED
        ServiceRole: !Ref BatchServiceRole
        ComputeEnvironmentName: "#{AWS::StackName}-align-compute-env"
        ComputeResources:
          Type: SPOT
          BidPercentage: 50
          AllocationStrategy: BEST_FIT_PROGRESSIVE
          MinvCpus: 0
          DesiredvCpus: 0
          MaxvCpus: 64
          InstanceTypes:
            - optimal
          ImageId: ${self:custom.ec2AlignmentImageId}
          Subnets:
            - ${self:custom.subnetId}
          SecurityGroupIds:
            - ${self:custom.securityGroupId}
          Ec2KeyPair: ${self:custom.sshKeyPairName}
          SpotIamFleetRole: !Ref SpotFleetRole
          InstanceRole: ecsInstanceRole
          Tags: ${self:provider.stackTags}

    ComputeAlignmentOnDemandEnv:
      Type: AWS::Batch::ComputeEnvironment
      Properties:
        Type: MANAGED
        State: ENABLED
        ServiceRole: !Ref BatchServiceRole
        ComputeEnvironmentName: "#{AWS::StackName}-align-ondemand-compute-env"
        ComputeResources:
          Type: EC2
          MinvCpus: 0
          DesiredvCpus: 0
          MaxvCpus: 64
          InstanceTypes:
            - optimal
          ImageId: ${self:custom.ec2AlignmentImageId}
          Subnets:
            - ${self:custom.subnetId}
          SecurityGroupIds:
            - ${self:custom.securityGroupId}
          Ec2KeyPair: ${self:custom.sshKeyPairName}
          InstanceRole: ecsInstanceRole
          Tags: ${self:provider.stackTags}

    LowPriorityComputeAlignmentJobQueue:
      Type: AWS::Batch::JobQueue
      Properties:
        ComputeEnvironmentOrder:
          - Order: 0
            ComputeEnvironment: !Ref ComputeAlignmentSpotEnv
        State: ENABLED
        Priority: 100
        JobQueueName: "${self:service}-${self:provider.stage}-align-job-queue-lowpriority"

    HighPriorityComputeAlignmentJobQueue:
      Type: AWS::Batch::JobQueue
      Properties:
        ComputeEnvironmentOrder:
          - Order: 0
            ComputeEnvironment: !Ref ComputeAlignmentOnDemandEnv
        State: ENABLED
        Priority: 200
        JobQueueName: "${self:service}-${self:provider.stage}-align-job-queue-highpriority"

    ComputeAlignmentJobDefinition:
      Type: "AWS::Batch::JobDefinition"
      Properties:
        JobDefinitionName: "${self:service}-${self:provider.stage}-align-job-definition"
        Type: Container
        RetryStrategy:
          Attempts: 1
        Timeout:
          AttemptDurationSeconds: 9000
        Parameters:
          iam_role: auto
          debug_flag: ${self:custom.debug}
          templates_bucket: ${self:custom.alignmentTemplatesBucket}
          inputs_bucket: ${self:custom.alignInputBucket}
          outputs_bucket: ${self:custom.alignOutputBucket}
          templates_dir: ${self:custom.alignmentTemplatesFolder}
          xy_resolution: "0"
          z_resolution: "0"
          reference_channel: "Signal_amount"
          comparison_alg: "Max"
          force_voxel_size: false
          nslots: ${self:custom.defaultAlignmentThreads}
        ContainerProperties:
          Image: ${self:custom.alignmentContainerImage}
          Vcpus: 16
          Memory: 8192
          JobRoleArn: !Ref ECSTaskRole
          Command:
            - /opt/aligner-scripts/run_aligner_using_aws.sh
            - "-debug"
            - "Ref::debug_flag"
            - "--use-iam-role"
            - "Ref::iam_role"
            - "--templates-s3bucket-name"
            - "Ref::templates_bucket"
            - "--inputs-s3bucket-name"
            - "Ref::inputs_bucket"
            - "--outputs-s3bucket-name"
            - "Ref::outputs_bucket"
            - "--templatedir"
            - "Ref::templates_dir"
            - "--xyres"
            - "Ref::xy_resolution"
            - "--zres"
            - "Ref::z_resolution"
            - "--reference-channel"
            - "Ref::reference_channel"
            - "--comparison_alg"
            - "Ref::comparison_alg"
            - "--forceVxSize"
            - "Ref::force_voxel_size"
            - "--nslots"
            - "Ref::nslots"
            - "--search-id"
            - "Ref::search_id"
            - "-i"
            - "Ref::input_filename"
            - "-o"
            - "Ref::output_folder"
          Volumes:
            - Name: scratch_data_volume
              Host:
                SourcePath: /scratch_volume/data
            - Name: scratch_tmp_volume
              Host:
                SourcePath: /scratch_volume/tmp
          MountPoints:
            - ContainerPath: /scratch
              ReadOnly: false
              SourceVolume: scratch_data_volume
            - ContainerPath: /tmp
              ReadOnly: false
              SourceVolume: scratch_tmp_volume
          Environment:
            - Name: FB_MODE
              Value: xvfb
            - Name: SEARCH_UPDATE_FUNCTION
              Value: ${file(../search/serverless.yml):service}-${self:provider.stage}-searchUpdate
            - Name: ALIGNMENT_MEMORY
              Value: 8G
            - Name: PREALIGN_TIMEOUT
              Value: 7200
          ReadonlyRootFilesystem: true
          Privileged: true
          LinuxParameters:
            Devices:
              - HostPath: /dev/fuse
                ContainerPath: ""
                Permissions:
                  - READ
                  - WRITE
                  - MKNOD

    BatchServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "batch.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
          - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

    ECSTaskRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "ecs-tasks.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
          - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        Policies:
          - PolicyName: AWSLambdaInvokeAccess
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - lambda:InvokeAsync
                  Resource: '*'
              Version: '2012-10-17'

    SpotFleetRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "spotfleet.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"
